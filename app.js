// app.js
// Tham chi·∫øu Firebase services
const db = firebase.database();
const storage = firebase.storage();
const messagesRef = db.ref('messages');

// Tham chi·∫øu DOM
const messagesDiv = document.getElementById('messages');
const messageInput = document.getElementById('message-input');
const fileInput = document.getElementById('file-input');
const sendButton = document.getElementById('send-button');
const voiceCallButton = document.getElementById('voice-call-button');
const videoCallButton = document.getElementById('video-call-button');
const shareLocationButton = document.getElementById('share-location-button');

// ƒêƒÉng nh·∫≠p ·∫©n danh ƒë√£ kh·ªüi t·∫°o trong firebase-config.js

// L·∫Øng nghe tin nh·∫Øn m·ªõi
messagesRef.on('child_added', snapshot => {
  const msg = snapshot.val();
  const div = document.createElement('div');
  div.classList.add('msg', msg.sender === currentUserId ? 'sent' : 'received');

  // Th·ªùi gian
  const timeSpan = document.createElement('span');
  timeSpan.classList.add('time');
  timeSpan.textContent = new Date(msg.timestamp).toLocaleTimeString();
  div.appendChild(timeSpan);

  // N·ªôi dung vƒÉn b·∫£n
  if (msg.text) {
    const textSpan = document.createElement('span');
    textSpan.textContent = msg.text;
    div.appendChild(textSpan);
  }

  // File
  if (msg.file) {
    const link = document.createElement('a');
    link.href = msg.file.url;
    link.textContent = `üìé ${msg.file.name}`;
    link.target = '_blank';
    div.appendChild(document.createElement('br'));
    div.appendChild(link);
  }

  messagesDiv.appendChild(div);
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
});

// G·ª≠i tin nh·∫Øn
sendButton.addEventListener('click', () => {
  const text = messageInput.value.trim();
  const file = fileInput.files[0];
  const msgData = { sender: currentUserId, timestamp: firebase.database.ServerValue.TIMESTAMP };

  if (file) {
    const fileRef = storage.ref(`files/${Date.now()}_${file.name}`);
    fileRef.put(file).then(() => fileRef.getDownloadURL()).then(url => {
      msgData.file = { url, name: file.name };
      if (text) msgData.text = text;
      messagesRef.push(msgData);
    });
  } else if (text) {
    msgData.text = text;
    messagesRef.push(msgData);
  }

  messageInput.value = '';
  fileInput.value = '';
});

// G·ªçi tho·∫°i/video v·ªõi WebRTC
let localStream; let peerConnection;
const iceServers = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };

async function startCall(isVideo) {
  try {
    localStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: isVideo });
    peerConnection = new RTCPeerConnection(iceServers);
    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
    // Ti·∫øp t·ª•c signaling qua Firebase (push offer/answer v√† ICE candidates)
  } catch (err) {
    console.error('L·ªói ph∆∞∆°ng ti·ªán:', err);
  }
}
voiceCallButton.onclick = () => startCall(false);
videoCallButton.onclick = () => startCall(true);

// Chia s·∫ª v·ªã tr√≠
shareLocationButton.onclick = () => {
  if (!navigator.geolocation) return alert('Kh√¥ng h·ªó tr·ª£ v·ªã tr√≠');
  navigator.geolocation.getCurrentPosition(pos => {
    sendText(`V·ªã tr√≠ c·ªßa t√¥i: https://www.google.com/maps?q=${pos.coords.latitude},${pos.coords.longitude}`);
  }, () => alert('Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠'));
};

// Emoji & Sticker
function sendEmoji(emoji) { sendText(emoji); }
function sendSticker(fileName) { sendText(`<img src=\"assets/stickers/${fileName}\" />`); }

function sendText(text) { messagesRef.push({ sender: currentUserId, text, timestamp: firebase.database.ServerValue.TIMESTAMP }); }

// Bi·∫øn l∆∞u userID (sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng)
let currentUserId;
firebase.auth().onAuthStateChanged(user => { if (user) currentUserId = user.uid; });
