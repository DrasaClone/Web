name: Build Android Overlay App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Bước tạo file vẫn giữ nguyên như cũ
      - name: Create Android Project Files from a Single YAML
        run: |
          # (Giữ nguyên toàn bộ phần dài tạo file từ lệnh echo và tee ở đây)
          # ...
          # ... (bỏ qua để không lặp lại, bạn chỉ cần giữ nguyên phần này)
          mkdir -p app/src/main/java/com/example/overlayapp
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values
          mkdir -p app/src/main/res/drawable

          echo '<?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              xmlns:tools="http://schemas.android.com/tools">
              <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
              <application
                  android:allowBackup="true"
                  android:icon="@drawable/ic_launcher"
                  android:label="@string/app_name"
                  android:roundIcon="@drawable/ic_launcher"
                  android:supportsRtl="true"
                  android:theme="@style/Theme.OverlayApp"
                  tools:targetApi="31">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:theme="@android:style/Theme.Translucent.NoTitleBar">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
                  <service android:name=".OverlayService" android:enabled="true" android:exported="false"/>
              </application>
          </manifest>' > app/src/main/AndroidManifest.xml
          echo '<?xml version="1.0" encoding="utf-8"?>
          <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:id="@+id/overlay_container"
              android:layout_width="match_parent"
              android:layout_height="match_parent">
              <com.example.overlayapp.OverlayService.CrosshairView
                  android:id="@+id/crosshair_view"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"
                  android:visibility="gone"/>
              <LinearLayout
                  android:id="@+id/settings_panel"
                  android:layout_width="200dp"
                  android:layout_height="wrap_content"
                  android:layout_gravity="center_horizontal|top"
                  android:layout_marginTop="20dp"
                  android:padding="8dp"
                  android:background="#80000000"
                  android:orientation="vertical"
                  android:visibility="gone">
                  <TextView
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:text="Độ trong suốt"
                      android:textColor="@android:color/white"/>
                  <SeekBar
                      android:id="@+id/opacity_seekbar"
                      android:layout_width="match_parent"
                      android:layout_height="wrap_content"
                      android:max="100"
                      android:progress="50" />
              </LinearLayout>
          </FrameLayout>' > app/src/main/res/layout/overlay_layout.xml
          echo '<?xml version="1.0" encoding="utf-8"?>
          <ImageButton xmlns:android="http://schemas.android.com/apk/res/android"
              android:id="@+id/control_btn"
              android:layout_width="50dp"
              android:layout_height="50dp"
              android:background="@drawable/control_button_background"
              android:src="@drawable/ic_control"
              android:scaleType="center"
              android:contentDescription="Control Button" />' > app/src/main/res/layout/control_button.xml
          echo '<?xml version="1.0" encoding="utf-8"?>
           <ImageView xmlns:android="http://schemas.android.com/apk/res/android"
              android:id="@+id/trash_icon"
              android:layout_width="80dp"
              android:layout_height="80dp"
              android:src="@drawable/ic_trash"
              android:padding="20dp"
              android:background="@drawable/trash_background"
              android:contentDescription="Trash" />' > app/src/main/res/layout/trash_layout.xml
          echo '<?xml version="1.0" encoding="utf-8"?><shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="oval"><solid android:color="#42A5F5"/><size android:width="50dp" android:height="50dp"/></shape>' > app/src/main/res/drawable/control_button_background.xml
          echo '<?xml version="1.0" encoding="utf-8"?><shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="oval"><solid android:color="#99FF0000"/></shape>' > app/src/main/res/drawable/trash_background.xml
          echo '<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24.0" android:viewportHeight="24.0"><path android:fillColor="#FFFFFF" android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></vector>' > app/src/main/res/drawable/ic_control.xml
          echo '<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24.0" android:viewportHeight="24.0"><path android:fillColor="#FFFFFF" android:pathData="M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z"/></vector>' > app/src/main/res/drawable/ic_trash.xml
          echo '<vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24" android:viewportHeight="24"><path android:fillColor="#FFFF0000" android:pathData="M12,2C6.47,2 2,6.47 2,12s4.47,10 10,10 10,-4.47 10,-10S17.53,2 12,2z"/></vector>' > app/src/main/res/drawable/ic_launcher.xml
          echo '<?xml version="1.0" encoding="utf-8"?><resources><string name="app_name">Overlay App</string></resources>' > app/src/main/res/values/strings.xml
          echo '<?xml version="1.0" encoding="utf-8"?><resources><style name="Theme.OverlayApp" parent="android:Theme.Material.Light.NoActionBar" /></resources>' > app/src/main/res/values/themes.xml
          tee app/src/main/java/com/example/overlayapp/MainActivity.kt > /dev/null <<EOF
          package com.example.overlayapp
          import android.app.Activity
          import android.content.Intent
          import android.net.Uri
          import android.os.Build
          import android.os.Bundle
          import android.provider.Settings
          import android.widget.Toast
          class MainActivity : Activity() {
              private val REQUEST_CODE = 101
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  checkOverlayPermission()
              }
              private fun checkOverlayPermission() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                      if (!Settings.canDrawOverlays(this)) {
                          val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:$packageName"))
                          startActivityForResult(intent, REQUEST_CODE)
                      } else { startOverlayService() }
                  } else { startOverlayService() }
              }
              override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
                  super.onActivityResult(requestCode, resultCode, data)
                  if (requestCode == REQUEST_CODE) {
                      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                          if (Settings.canDrawOverlays(this)) { startOverlayService() } else { Toast.makeText(this, "Permission not granted, exiting.", Toast.LENGTH_SHORT).show(); finish() }
                      }
                  }
              }
              private fun startOverlayService() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { startForegroundService(Intent(this, OverlayService::class.java)) } else { startService(Intent(this, OverlayService::class.java)) }
                  finish()
              }
          }
EOF
          tee app/src/main/java/com/example/overlayapp/OverlayService.kt > /dev/null <<EOF
          package com.example.overlayapp
          import android.annotation.SuppressLint
          import android.app.Notification
          import android.app.NotificationChannel
          import android.app.NotificationManager
          import android.app.Service
          import android.content.Context
          import android.content.Intent
          import android.graphics.*
          import android.os.Build
          import android.os.IBinder
          import android.view.*
          import android.widget.FrameLayout
          import android.widget.ImageButton
          import android.widget.ImageView
          import android.widget.SeekBar
          import kotlin.math.abs
          class OverlayService : Service() {
              private lateinit var windowManager: WindowManager
              private lateinit var overlayView: FrameLayout
              private lateinit var controlButton: View
              private lateinit var trashView: View
              private var isOverlayVisible = false
              override fun onBind(intent: Intent?): IBinder? { return null }
              override fun onCreate() {
                  super.onCreate()
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                      val channel = NotificationChannel("overlay_service", "Overlay Service", NotificationManager.IMPORTANCE_LOW)
                      val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                      manager.createNotificationChannel(channel)
                      val notification = Notification.Builder(this, "overlay_service").setContentTitle("Overlay App").setContentText("Service is running").setSmallIcon(R.drawable.ic_launcher).build()
                      startForeground(1, notification)
                  }
                  windowManager = getSystemService(Context.WINDOW_SERVICE) as WindowManager
                  setupViews()
              }
              @SuppressLint("ClickableViewAccessibility")
              private fun setupViews() {
                  val inflater = getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
                  overlayView = inflater.inflate(R.layout.overlay_layout, null) as FrameLayout
                  val crosshair = overlayView.findViewById<View>(R.id.crosshair_view)
                  val settingsPanel = overlayView.findViewById<View>(R.id.settings_panel)
                  val opacitySeekBar = overlayView.findViewById<SeekBar>(R.id.opacity_seekbar)
                  opacitySeekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
                      override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) { crosshair.alpha = progress / 100f }
                      override fun onStartTrackingTouch(seekBar: SeekBar?) {}
                      override fun onStopTrackingTouch(seekBar: SeekBar?) {}
                  })
                  val overlayParams = WindowManager.LayoutParams(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT, if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY else WindowManager.LayoutParams.TYPE_PHONE, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE or WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN, PixelFormat.TRANSLUCENT)
                  windowManager.addView(overlayView, overlayParams)
                  overlayView.visibility = View.GONE
                  controlButton = inflater.inflate(R.layout.control_button, null)
                  val controlParams = WindowManager.LayoutParams(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT, if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY else WindowManager.LayoutParams.TYPE_PHONE, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, PixelFormat.TRANSLUCENT).apply { gravity = Gravity.TOP or Gravity.START; x = 100; y = 100 }
                  windowManager.addView(controlButton, controlParams)
                  trashView = inflater.inflate(R.layout.trash_layout, null)
                  val trashParams = WindowManager.LayoutParams(WindowManager.LayoutParams.WRAP_CONTENT, WindowManager.LayoutParams.WRAP_CONTENT, if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY else WindowManager.LayoutParams.TYPE_PHONE, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE, PixelFormat.TRANSLUCENT).apply { gravity = Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL }
                  windowManager.addView(trashView, trashParams)
                  trashView.visibility = View.GONE
                  controlButton.setOnClickListener {
                      isOverlayVisible = !isOverlayVisible
                      overlayView.visibility = if(isOverlayVisible) View.VISIBLE else View.GONE
                  }
                  controlButton.setOnTouchListener(object : View.OnTouchListener {
                      private var initialX: Int = 0
                      private var initialY: Int = 0
                      private var initialTouchX: Float = 0.toFloat()
                      private var initialTouchY: Float = 0.toFloat()
                      private val CLICK_DRAG_TOLERANCE = 10f
                      override fun onTouch(v: View, event: MotionEvent): Boolean {
                          when (event.action) {
                              MotionEvent.ACTION_DOWN -> { initialX = controlParams.x; initialY = controlParams.y; initialTouchX = event.rawX; initialTouchY = event.rawY; trashView.visibility = View.VISIBLE; return true }
                              MotionEvent.ACTION_MOVE -> { val newX = initialX + (event.rawX - initialTouchX).toInt(); val newY = initialY + (event.rawY - initialTouchY).toInt(); controlParams.x = newX; controlParams.y = newY; windowManager.updateViewLayout(controlButton, controlParams); val trashRect = Rect(); trashView.getGlobalVisibleRect(trashRect); if (trashRect.contains(event.rawX.toInt(), event.rawY.toInt())) { (trashView as ImageView).setColorFilter(Color.RED) } else { (trashView as ImageView).clearColorFilter() }; return true }
                              MotionEvent.ACTION_UP -> { trashView.visibility = View.GONE; val trashRect = Rect(); trashView.getGlobalVisibleRect(trashRect); if (trashRect.contains(event.rawX.toInt(), event.rawY.toInt())) { stopSelf(); return true }; val xDiff = abs(event.rawX - initialTouchX); val yDiff = abs(event.rawY - initialTouchY); if (xDiff < CLICK_DRAG_TOLERANCE && yDiff < CLICK_DRAG_TOLERANCE) { v.performClick() }; return true }
                          }
                          return false
                      }
                  })
              }
              override fun onDestroy() { super.onDestroy(); windowManager.removeView(overlayView); windowManager.removeView(controlButton); windowManager.removeView(trashView) }
              class CrosshairView(context: Context, attrs: android.util.AttributeSet? = null) : View(context, attrs) {
                  private val paint = Paint().apply { color = Color.RED; style = Paint.Style.STROKE; strokeWidth = 4f; isAntiAlias = true }
                  override fun onDraw(canvas: Canvas) {
                      super.onDraw(canvas); val centerX = width / 2f; val centerY = height / 2f; val radius = 50f; val crosshairLength = 30f
                      canvas.drawCircle(centerX, centerY, radius, paint)
                      canvas.drawLine(centerX - crosshairLength, centerY, centerX + crosshairLength, centerY, paint)
                      canvas.drawLine(centerX, centerY - crosshairLength, centerX, centerY + crosshairLength, paint)
                  }
              }
          }
EOF
          echo 'pluginManagement { repositories { google(); mavenCentral(); gradlePluginPortal() } } dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS); repositories { google(); mavenCentral() } }; rootProject.name = "Overlay App"; include(":app")' > settings.gradle.kts
          echo 'plugins { alias(libs.plugins.androidApplication) apply false; alias(libs.plugins.kotlinAndroid) apply false }' > build.gradle.kts
          mkdir -p gradle
          echo '[versions]; agp = "8.4.1"; kotlin = "1.9.20"; coreKtx = "1.13.1"; appcompat = "1.7.0"; material = "1.12.0"; [libraries]; core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }; appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }; material = { group = "com.google.android.material", name = "material", version.ref = "material" }; [plugins]; androidApplication = { id = "com.android.application", version.ref = "agp" }; kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }' > gradle/libs.versions.toml
          echo "plugins { alias(libs.plugins.androidApplication); alias(libs.plugins.kotlinAndroid) }; android { namespace = \"com.example.overlayapp\"; compileSdk = 34; defaultConfig { applicationId = \"com.example.overlayapp\"; minSdk = 24; targetSdk = 34; versionCode = 1; versionName = \"1.0\" }; buildTypes { release { isMinifyEnabled = false; proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\") } }; compileOptions { sourceCompatibility = JavaVersion.VERSION_1_8; targetCompatibility = JavaVersion.VERSION_1_8 }; kotlinOptions { jvmTarget = \"1.8\" }; buildFeatures { viewBinding = true } }; dependencies { implementation(libs.core.ktx); implementation(libs.appcompat); implementation(libs.material) }" > app/build.gradle.kts
          touch app/proguard-rules.pro
          
      # ================== THAY ĐỔI Ở ĐÂY ==================
      
      # Bước 1: (MỚI) Dùng action của Gradle để tự tạo ra file gradlew
      # Nó sẽ chạy lệnh `gradle wrapper` để tạo ra gradlew, gradlew.bat, và thư mục gradle/wrapper.
      - name: Generate Gradle Wrapper
        uses: gradle/actions/setup-gradle@v3
        with:
          # `gradle-version: wrapper` nghĩa là sử dụng wrapper nếu có,
          # nếu không có, sẽ dùng một phiên bản Gradle mặc định để chạy lệnh `wrapper` tạo ra nó.
          # Tuy nhiên để chắc chắn, ta chỉ định một phiên bản.
          gradle-version: 8.6

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Bước 2: (THAY ĐỔI) Bây giờ file gradlew đã tồn tại, ta có thể chạy build
      # Vẫn dùng action của Gradle để chạy build, nó sẽ tự động dùng gradlew.
      - name: Build with Gradle
        run: ./gradlew app:assembleDebug
        
      # ========================================================
      
      # Bước Upload artifact vẫn giữ nguyên
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: overlay-app-debug
          path: app/build/outputs/apk/debug/app-debug.apk
