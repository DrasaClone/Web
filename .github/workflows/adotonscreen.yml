name: Build Android Overlay App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # =================== PHƯƠNG PHÁP MỚI - CHIA NHỎ RA TỪNG BƯỚC ===================

      - name: Create Project Directory Structure
        run: |
          mkdir -p app/src/main/java/com/example/overlayapp
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values
          mkdir -p app/src/main/res/drawable
          mkdir -p gradle

      - name: Create AndroidManifest.xml
        run: |
          tee app/src/main/AndroidManifest.xml > /dev/null <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools">
              <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
              <application
                  android:allowBackup="true"
                  android:icon="@drawable/ic_launcher"
                  android:label="@string/app_name"
                  android:roundIcon="@drawable/ic_launcher"
                  android:supportsRtl="true"
                  android:theme="@style/Theme.OverlayApp"
                  tools:targetApi="31">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:theme="@android:style/Theme.Translucent.NoTitleBar">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
                  <service android:name=".OverlayService" android:enabled="true" android:exported="false"/>
              </application>
          </manifest>
EOF

      - name: Create Layout Files
        run: |
          tee app/src/main/res/layout/overlay_layout.xml > /dev/null <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:id="@+id/overlay_container"
              android:layout_width="match_parent"
              android:layout_height="match_parent">
              <com.example.overlayapp.OverlayService.CrosshairView
                  android:id="@+id/crosshair_view"
                  android:layout_width="match_parent"
                  android:layout_height="match_parent"
                  android:visibility="gone"/>
              <LinearLayout
                  android:id="@+id/settings_panel"
                  android:layout_width="250dp"
                  android:layout_height="wrap_content"
                  android:layout_gravity="center_horizontal|top"
                  android:layout_marginTop="20dp"
                  android:padding="8dp"
                  android:background="#A0000000"
                  android:orientation="vertical"
                  android:visibility="gone">
                  <TextView
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:text="Độ trong suốt"
                      android:textColor="@android:color/white"/>
                  <SeekBar
                      android:id="@+id/opacity_seekbar"
                      android:layout_width="match_parent"
                      android:layout_height="wrap_content"
                      android:max="100"
                      android:progress="100" />
              </LinearLayout>
          </FrameLayout>
EOF
          tee app/src/main/res/layout/control_button.xml > /dev/null <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <ImageButton xmlns:android="http://schemas.android.com/apk/res/android"
              android:id="@+id/control_btn"
              android:layout_width="50dp"
              android:layout_height="50dp"
              android:background="@drawable/control_button_background"
              android:src="@drawable/ic_control"
              android:scaleType="center"
              android:contentDescription="Control Button" />
EOF
          tee app/src/main/res/layout/trash_layout.xml > /dev/null <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
           <ImageView xmlns:android="http://schemas.android.com/apk/res/android"
              android:id="@+id/trash_icon"
              android:layout_width="80dp"
              android:layout_height="80dp"
              android:src="@drawable/ic_trash"
              android:padding="20dp"
              android:background="@drawable/trash_background"
              android:contentDescription="Trash" />
EOF
          
      - name: Create Drawable Files
        run: |
          tee app/src/main/res/drawable/control_button_background.xml > /dev/null <<'EOF'
          <?xml version="1.0" encoding="utf-8"?><shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="oval"><solid android:color="#42A5F5"/></shape>
EOF
          tee app/src/main/res/drawable/trash_background.xml > /dev/null <<'EOF'
          <?xml version="1.0" encoding="utf-8"?><shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="oval"><solid android:color="#BF360C"/></shape>
EOF
          tee app/src/main/res/drawable/ic_control.xml > /dev/null <<'EOF'
          <vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24" android:viewportHeight="24"><path android:fillColor="#FFFFFF" android:pathData="M12,7c-2.76,0 -5,2.24 -5,5s2.24,5 5,5 5,-2.24 5,-5 -2.24,-5 -5,-5zM12,15c-1.66,0 -3,-1.34 -3,-3s1.34,-3 3,-3 3,1.34 3,3 -1.34,3 -3,3z"/></vector>
EOF
          tee app/src/main/res/drawable/ic_trash.xml > /dev/null <<'EOF'
          <vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="24dp" android:height="24dp" android:viewportWidth="24" android:viewportHeight="24"><path android:fillColor="#FFFFFF" android:pathData="M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z"/></vector>
EOF
          tee app/src/main/res/drawable/ic_launcher.xml > /dev/null <<'EOF'
          <vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="108dp" android:width="108dp" android:viewportWidth="108" android:viewportHeight="108"><path android:fillColor="#3DDC84" android:pathData="M0,0h108v108h-108z"/></vector>
EOF
      
      - name: Create Values Files
        run: |
          tee app/src/main/res/values/strings.xml > /dev/null <<'EOF'
          <resources><string name="app_name">Dot Overlay</string></resources>
EOF
          tee app/src/main/res/values/themes.xml > /dev/null <<'EOF'
          <resources><style name="Theme.OverlayApp" parent="android:Theme.Material.Light.NoActionBar" /></resources>
EOF

      - name: Create Kotlin Source Files
        run: |
          tee app/src/main/java/com/example/overlayapp/MainActivity.kt > /dev/null <<'EOF'
          package com.example.overlayapp
          import android.app.Activity
          import android.content.Intent
          import android.net.Uri
          import android.os.Build
          import android.os.Bundle
          import android.provider.Settings
          import android.widget.Toast
          
          class MainActivity : Activity() {
              companion object { const val REQUEST_CODE = 101 }
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  checkOverlayPermission()
              }
              private fun checkOverlayPermission() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !Settings.canDrawOverlays(this)) {
                      val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:$packageName"))
                      startActivityForResult(intent, REQUEST_CODE)
                  } else {
                      startOverlayService()
                  }
              }
              @Suppress("DEPRECATION")
              override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
                  super.onActivityResult(requestCode, resultCode, data)
                  if (requestCode == REQUEST_CODE) {
                      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && Settings.canDrawOverlays(this)) {
                          startOverlayService()
                      } else {
                          Toast.makeText(this, "Permission not granted, exiting.", Toast.LENGTH_SHORT).show()
                          finish()
                      }
                  }
              }
              private fun startOverlayService() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                      startForegroundService(Intent(this, OverlayService::class.java))
                  } else {
                      startService(Intent(this, OverlayService::class.java))
                  }
                  finish()
              }
          }
EOF
          tee app/src/main/java/com/example/overlayapp/OverlayService.kt > /dev/null <<'EOF'
          package com.example.overlayapp
          import android.annotation.SuppressLint
          import android.app.Notification
          import android.app.NotificationChannel
          import android.app.NotificationManager
          import android.app.Service
          import android.content.Context
          import android.content.Intent
          import android.graphics.*
          import android.os.Build
          import android.os.IBinder
          import android.view.*
          import android.widget.FrameLayout
          import android.widget.ImageView
          import android.widget.LinearLayout
          import android.widget.SeekBar
          import kotlin.math.abs
          
          class OverlayService : Service() {
              private lateinit var windowManager: WindowManager
              private lateinit var controlButton: View
              private lateinit var trashView: View
              private lateinit var overlayContent: FrameLayout
              private lateinit var crosshairView: View
              private lateinit var settingsPanel: LinearLayout
              override fun onBind(intent: Intent?): IBinder? = null
              override fun onCreate() {
                  super.onCreate()
                  showForegroundNotification()
                  windowManager = getSystemService(Context.WINDOW_SERVICE) as WindowManager
                  setupViews()
              }
              private fun showForegroundNotification() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                      val channel = NotificationChannel("overlay_service", "Overlay Service", NotificationManager.IMPORTANCE_LOW)
                      val manager = getSystemService(NotificationManager::class.java)
                      manager.createNotificationChannel(channel)
                      val notification = Notification.Builder(this, "overlay_service")
                          .setContentTitle("Overlay App Active")
                          .setSmallIcon(R.drawable.ic_control)
                          .build()
                      startForeground(1, notification)
                  }
              }
              @SuppressLint("ClickableViewAccessibility")
              private fun setupViews() {
                  val inflater = LayoutInflater.from(this)
                  
                  overlayContent = inflater.inflate(R.layout.overlay_layout, null, false) as FrameLayout
                  crosshairView = overlayContent.findViewById(R.id.crosshair_view)
                  settingsPanel = overlayContent.findViewById(R.id.settings_panel)
                  val opacitySeekBar = settingsPanel.findViewById<SeekBar>(R.id.opacity_seekbar)
                  opacitySeekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
                      override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                          crosshairView.alpha = progress / 100f
                      }
                      override fun onStartTrackingTouch(p0: SeekBar?) {}
                      override fun onStopTrackingTouch(p0: SeekBar?) {}
                  })
                  windowManager.addView(overlayContent, createLayoutParams(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE or WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE))

                  controlButton = inflater.inflate(R.layout.control_button, null, false)
                  val controlParams = createLayoutParams().apply {
                      gravity = Gravity.TOP or Gravity.START; x = 100; y = 100
                  }
                  windowManager.addView(controlButton, controlParams)

                  trashView = inflater.inflate(R.layout.trash_layout, null, false)
                  val trashParams = createLayoutParams(flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE).apply {
                      gravity = Gravity.BOTTOM or Gravity.CENTER_HORIZONTAL; y = 50
                  }
                  windowManager.addView(trashView, trashParams)
                  trashView.visibility = View.GONE

                  controlButton.setOnClickListener {
                      val isVisible = crosshairView.visibility == View.VISIBLE
                      crosshairView.visibility = if (isVisible) View.GONE else View.VISIBLE
                      settingsPanel.visibility = if (isVisible) View.GONE else View.VISIBLE
                  }
                  controlButton.setOnTouchListener(createButtonTouchListener(controlParams))
              }
              
              @SuppressLint("ClickableViewAccessibility")
              private fun createButtonTouchListener(params: WindowManager.LayoutParams) = object : View.OnTouchListener {
                  private var initialX = 0; private var initialY = 0
                  private var initialTouchX = 0f; private var initialTouchY = 0f
                  private val clickDragTolerance by lazy { ViewConfiguration.get(this@OverlayService).scaledTouchSlop }
                  override fun onTouch(view: View, event: MotionEvent): Boolean {
                      when (event.action) {
                          MotionEvent.ACTION_DOWN -> { initialX = params.x; initialY = params.y; initialTouchX = event.rawX; initialTouchY = event.rawY; trashView.visibility = View.VISIBLE; return true }
                          MotionEvent.ACTION_UP -> { trashView.visibility = View.GONE; val trashRect = Rect(); trashView.getGlobalVisibleRect(trashRect); if (trashRect.contains(event.rawX.toInt(), event.rawY.toInt())) { stopSelf(); return true }; if (abs(event.rawX - initialTouchX) < clickDragTolerance && abs(event.rawY - initialTouchY) < clickDragTolerance) { view.performClick() }; return true }
                          MotionEvent.ACTION_MOVE -> { params.x = initialX + (event.rawX - initialTouchX).toInt(); params.y = initialY + (event.rawY - initialTouchY).toInt(); windowManager.updateViewLayout(controlButton, params); val trashRect = Rect(); trashView.getGlobalVisibleRect(trashRect); (trashView as ImageView).setColorFilter( if (trashRect.contains(event.rawX.toInt(), event.rawY.toInt())) Color.argb(255, 255, 0, 0) else Color.TRANSPARENT ); return true }
                      }; return false
                  }
              }
              override fun onDestroy() {
                  super.onDestroy(); windowManager.removeView(overlayContent); windowManager.removeView(controlButton); windowManager.removeView(trashView)
              }
              private fun createLayoutParams(width: Int = WindowManager.LayoutParams.WRAP_CONTENT, height: Int = WindowManager.LayoutParams.WRAP_CONTENT, flags: Int = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE) = WindowManager.LayoutParams(width, height, if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY else WindowManager.LayoutParams.TYPE_PHONE, flags, PixelFormat.TRANSLUCENT)
              class CrosshairView(context: Context, attrs: android.util.AttributeSet? = null) : View(context, attrs) {
                  private val paint = Paint(Paint.ANTI_ALIAS_FLAG).apply { color = Color.RED; style = Paint.Style.STROKE; strokeWidth = 3f }
                  override fun onDraw(canvas: Canvas) { super.onDraw(canvas); val centerX = width / 2f; val centerY = height / 2f; val radius = 60f; val crosshairLength = 40f; canvas.drawCircle(centerX, centerY, radius, paint); canvas.drawLine(centerX - crosshairLength, centerY, centerX + crosshairLength, centerY, paint); canvas.drawLine(centerX, centerY - crosshairLength, centerX, centerY + crosshairLength, paint) }
              }
          }
EOF

      - name: Create Gradle Config Files
        run: |
          tee settings.gradle.kts > /dev/null <<'EOF'
          pluginManagement { repositories { google(); mavenCentral(); gradlePluginPortal() } }
          dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS); repositories { google(); mavenCentral() } }
          rootProject.name = "Dot Overlay"
          include(":app")
EOF
          tee build.gradle.kts > /dev/null <<'EOF'
          plugins { alias(libs.plugins.androidApplication) apply false; alias(libs.plugins.kotlinAndroid) apply false }
EOF
          tee gradle/libs.versions.toml > /dev/null <<'EOF'
          [versions]
          agp = "8.4.1"
          kotlin = "1.9.23"
          coreKtx = "1.13.1"
          [libraries]
          core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
          [plugins]
          androidApplication = { id = "com.android.application", version.ref = "agp" }
          kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
EOF
          tee app/build.gradle.kts > /dev/null <<'EOF'
          plugins { alias(libs.plugins.androidApplication); alias(libs.plugins.kotlinAndroid) }
          android {
              namespace = "com.example.overlayapp"
              compileSdk = 34
              defaultConfig { applicationId = "com.example.overlayapp"; minSdk = 26; targetSdk = 34; versionCode = 1; versionName = "1.0" }
              buildTypes { release { isMinifyEnabled = false; proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro") } }
              compileOptions { sourceCompatibility = JavaVersion.VERSION_1_8; targetCompatibility = JavaVersion.VERSION_1_8 }
              kotlinOptions { jvmTarget = "1.8" }
          }
          dependencies { implementation(libs.core.ktx) }
EOF
          touch app/proguard-rules.pro

      - name: Build with Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: app:assembleDebug

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dot-overlay-app
          path: app/build/outputs/apk/debug/app-debug.apk
