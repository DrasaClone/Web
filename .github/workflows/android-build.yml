# Tên của Workflow
name: Build Android APK with dedicated Action

# Điều kiện kích hoạt Workflow
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# Các công việc cần thực hiện
jobs:
  android-build:
    # Chạy trên máy ảo Ubuntu mới nhất
    runs-on: ubuntu-latest

    # Các bước thực hiện tuần tự
    steps:
      # Bước 1: Lấy mã nguồn từ repository về máy ảo
      - name: Checkout repository code
        uses: actions/checkout@v4

      # Bước 2: Cài đặt môi trường Java (JDK phiên bản 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Bước 3: Cache các thư viện Gradle để build nhanh hơn ở các lần sau
      # Bước này tách biệt và đáng tin cậy hơn cache mặc định
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Bước 4: Chạy lệnh build Gradle
      # Đây là bước quan trọng nhất. Chúng ta chỉ cần chỉ định task cần chạy.
      # Action này sẽ tự động tìm và chạy gradlew
      - name: Build with Gradle
        run: ./gradlew :app:assembleDebug
      
      # Bước 5: Tìm file APK đã được tạo
      # Chúng ta dùng một action khác để tìm đường dẫn chính xác của file APK.
      # Rất hữu ích vì đường dẫn có thể thay đổi.
      - name: Find debug APK
        id: find_apk # Đặt ID để tham chiếu ở bước sau
        uses: zuisong/find-file@v1
        with:
          path: 'app/build/outputs/apk/debug' # Thư mục chứa APK
          suffix: '.apk' # Tìm file có đuôi .apk

      # Bước 6: Tải file APK đã build xong lên làm "Artifact"
      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          # Lấy đường dẫn từ kết quả của bước 'find_apk' ở trên
          path: ${{ steps.find_apk.outputs.path }}
